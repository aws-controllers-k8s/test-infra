#! /usr/bin/env python

# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may
# not use this file except in compliance with the License. A copy of the
# License is located at
#
#	 http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# This script queries Github, aws-sdk-go and various ACK controller
# repositories to build a YAML file containing metadata about individual ACK
# controllers.
#
# We first git clone the aws-sdk-go main branch to a local checkout and
# determine a list of all AWS services by examining the models/apis directory
# and reading just the top metadata block for the API model definition file.
# Information about AWS services gathered during this stage of discovery:
#
# * Service long name --  e.g. Amazon Simple Search Service
# * Service short name -- e.g. Amazon S3
# * Service model name -- e.g. s3
# * Service package name -- e.g. s3
# * Service API version -- e.g. 2006-03-01
#
# For each AWS service identified in the first phase of discovery, we then
# determine the following information by querying the GitHub API, ECR Public
# API and looking in go.mod files in source repositories.
#
# * Project stage of ACK controller -- e.g. "Proposed" or "Released"
# * Maintenance phase of ACK controller - e.g. "Preview" or "GA"
# * ACK controller repository URL, if any -- e.g. github.com/aws-controllers-k8s/s3-controller
# * Latest release version of ACK controller -- e.g. v0.0.6
# * Latest Helm chart version for the ACK controller -- e.g. v0.0.6 or v0-stable
# * Version of ACK runtime used in latest controller release -- e.g. v0.17.0
# * Version of aws-sdk-go used in latest controller release -- e.g. v1.40.24

import argparse
import os
import pathlib
import pprint
import sys

import github

import awssdkgo
import controller
import ecrpublic
import printer
import service

DEFAULT_CACHE_DIR = os.path.join(pathlib.Path.home(), ".cache", "ack-discover")

GH_ACTOR = os.environ.get("GITHUB_ACTOR")
GH_TOKEN = os.environ.get("GITHUB_TOKEN")

if not GH_TOKEN:
    print("ERROR: Please ensure GH_TOKEN environment variable is set to the Github Personal Access Token (PAT) the script will use to query the Github API.")
    sys.exit(1)

CACHE_DIR = os.environ.get("CACHE_DIR", DEFAULT_CACHE_DIR)
os.makedirs(CACHE_DIR, exist_ok=True)


def setup():
    """Sets up option parsing and returns the set of parsed arguments."""
    description = """This script queries a variety of data sources (Github API, ECR Public API, git,
etc) to build information about all AWS services and latest release information
for any associated ACK controller.

Environment variables:
  GITHUB_ACTOR:        Name of the GitHub account querying the GitHub API
  GITHUB_TOKEN:        Personal Access Token for '$GITHUB_ACTOR'
  CACHE_DIR:           Directory to cache fetched information and Git
                       repositories (default ~/.cache/ack-discover)
"""
    p = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter,
    )
    p.add_argument("--debug",
        help="show debug output",
        action="store_true",
    )
    p.add_argument("--format", "-f",
        help="output format",
        type=str,
        default=printer.FORMAT_TABLE,
        choices=printer.FORMATS,
    )
    p.add_argument("--output", "-o",
        help="output file (optional, defaults to stdout)",
        type=str,
    )
    args = p.parse_args()
    return args

gh = github.Github(GH_TOKEN)

args = setup()
writer = printer.Writer(args)

try:
    ep_client = ecrpublic.get_client(writer)
except Exception as e:
    print("ERROR: failed to get client for ECR Public:", str(e))
    sys.exit(255)

repo = awssdkgo.get_repo(writer, GH_TOKEN, CACHE_DIR)
services = service.collect_all(writer, repo)
controllers = controller.collect_all(writer, gh, ep_client, services)
writer.print_services(services, controllers)
